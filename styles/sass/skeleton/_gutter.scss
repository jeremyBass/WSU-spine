@charset "UTF-8";
@mixin gutter($layout) {

	$gutters: (
		'': 2rem,
		'.wide': 4rem,
		'.narrow': 1rem
	);

	@each $gutter, $width in $gutters {
	
		.gutter#{$gutter} .column:not(.gutterless),
		.guttered#{$gutter} {
			border-width: 0;
			border-left-width: $width;
			border-right-width: $width;
			border-style: solid;
			border-color: rgba(255, 255, 255, 0);
		}
	
	}

	$spacing: (
		'loose': 4rem,
		'tight': 1rem
		);

	@each $space, $width in $spacing {
	
		.spacing-#{$space} .gutter .column:not(.gutterless),
		.spacing-#{$space} .guttered {
			border-left-width: $width;
			border-right-width: $width; }
	
		// One Column
		.spacing-#{$space} .single.gutter .column:not(.gutterless) {
			border-left-width: $width;
			border-right-width: $width;
		}
	
		// Two Columns
		.spacing-#{$space} .halves.gutter .column.one:not(.gutterless),
		.spacing-#{$space} .halves.gutter .column:nth-of-type(2n+3):not(.gutterless),
		.spacing-#{$space} .side-left.gutter .column.one:not(.gutterless),
		.spacing-#{$space} .side-right.gutter .column.one:not(.gutterless),
		.spacing-#{$space} .margin-left.gutter .column.one:not(.gutterless),
		.spacing-#{$space} .margin-right.gutter .column.one:not(.gutterless) {
			@if $layout != "small" { border-right-width: $width * .5; } @else { border-right-width: $width; }
		}
		.spacing-#{$space} .halves.gutter .column.two:not(.gutterless),
		.spacing-#{$space} .halves.gutter .column:nth-of-type(2n+4):not(.gutterless),
		.spacing-#{$space} .side-left.gutter .column.two:not(.gutterless),
		.spacing-#{$space} .side-right.gutter .column.two:not(.gutterless),
		.spacing-#{$space} .margin-left.gutter .column.two:not(.gutterless),
		.spacing-#{$space} .margin-right.gutter .column.two:not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .5; } @else { border-left-width: $width; }
		}
	
		// Three Columns
		.spacing-#{$space} .thirds.gutter .column.one:not(.gutterless),
		.spacing-#{$space} .thirds.gutter .column:nth-of-type(3n+4):not(.gutterless),
		.spacing-#{$space} .triptych.gutter .column.one:not(.gutterless) {
			@if $layout != "small" { border-right-width: $width * .3125; } @else { border-right-width: $width; }
		}
		.spacing-#{$space} .thirds.gutter .column.two:not(.gutterless),
		.spacing-#{$space} .thirds.gutter .column:nth-of-type(3n+5):not(.gutterless),
		.spacing-#{$space} .triptych.gutter .column.two:not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .65625; } @else { border-left-width: $width; }
			@if $layout != "small" { border-right-width: $width * .65625; } @else { border-right-width: $width; }
		}
		.spacing-#{$space} .thirds.gutter .column.three:not(.gutterless),
		.spacing-#{$space} .thirds.gutter .column:nth-of-type(3n+6):not(.gutterless),
		.spacing-#{$space} .triptych.gutter .column.three:not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .3125; } @else { border-left-width: $width; }
		}
	
		// Four Columns
		.spacing-#{$space} .quarters.gutter .column.one:not(.gutterless),
		.spacing-#{$space} .quarters.gutter .column:nth-of-type(4n+5):not(.gutterless) {
			@if $layout != "small" { border-right-width: $width * .25; } @else { border-right-width: $width * .5; }
		}
		.spacing-#{$space} .quarters.gutter .column.two:not(.gutterless),
		.spacing-#{$space} .quarters.gutter .column:nth-of-type(4n+6):not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .75; } @else { border-left-width: $width * .5; }
			@if $layout != "small" { border-right-width: $width * .5; } @else { border-right-width: $width * .5; }
		}
		.spacing-#{$space} .quarters.gutter .column.three:not(.gutterless),
		.spacing-#{$space} .quarters.gutter .column:nth-of-type(4n+7):not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .5; } @else { border-left-width: $width * .5; }
			@if $layout != "small" { border-right-width: $width * .75; } @else { border-right-width: $width * .5; }
		}
		.spacing-#{$space} .quarters.gutter .column.four:not(.gutterless),
		.spacing-#{$space} .quarters.gutter .column:nth-of-type(4n+8):not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .25; } @else { border-left-width: $width * .5; }
		}
	
	}

	@each $gutter, $width in $gutters {
	
		// One Column
		.single.gutter#{$gutter} .column:not(.gutterless) {
			border-left-width: $width;
			border-right-width: $width;
		}
	
		// Two Columns
		.halves.gutter#{$gutter} .column.one:not(.gutterless),
		.halves.gutter#{$gutter} .column:nth-of-type(2n+3):not(.gutterless),
		.side-left.gutter#{$gutter} .column.one:not(.gutterless),
		.side-right.gutter#{$gutter} .column.one:not(.gutterless) {
			@if $layout != "small" { border-right-width: $width * .5; } @else { border-right-width: $width; }
		}
		.halves.gutter#{$gutter} .column.two:not(.gutterless),
		.halves.gutter#{$gutter} .column:nth-of-type(2n+4):not(.gutterless),
		.side-left.gutter#{$gutter} .column.two:not(.gutterless),
		.side-right.gutter#{$gutter} .column.two:not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .5; } @else { border-left-width: $width; }
		}
	
		// Three Columns
		.thirds.gutter#{$gutter} .column.one:not(.gutterless),
		.thirds.gutter#{$gutter} .column:nth-of-type(3n+4):not(.gutterless),
		.triptych.gutter#{$gutter} .column.one:not(.gutterless) {
			@if $layout != "small" { border-right-width: $width * .3125; } @else { border-right-width: $width; }
		}
		.thirds.gutter#{$gutter} .column.two:not(.gutterless),
		.thirds.gutter#{$gutter} .column:nth-of-type(3n+5):not(.gutterless),
		.triptych.gutter#{$gutter} .column.two:not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .65625; } @else { border-left-width: $width; }
			@if $layout != "small" { border-right-width: $width * .65625; } @else { border-right-width: $width; }
		}
		.thirds.gutter#{$gutter} .column.three:not(.gutterless),
		.thirds.gutter#{$gutter} .column:nth-of-type(3n+6):not(.gutterless),
		.triptych.gutter#{$gutter} .column.three:not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .3125; } @else { border-left-width: $width; }
		}
	
		// Four Columns
		.quarters.gutter#{$gutter} .column.one:not(.gutterless),
		.quarters.gutter#{$gutter} .column:nth-of-type(4n+5):not(.gutterless) {
			@if $layout != "small" { border-right-width: $width * .25 ; } @else { border-right-width: $width * .5; }
		}
		.quarters.gutter#{$gutter} .column.two:not(.gutterless),
		.quarters.gutter#{$gutter} .column:nth-of-type(4n+6):not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .75; } @else { border-left-width: $width * .5; }
			@if $layout != "small" { border-right-width: $width * .5; } @else { border-right-width: $width * .5; }
		}
		.quarters.gutter#{$gutter} .column.three:not(.gutterless),
		.quarters.gutter#{$gutter} .column:nth-of-type(4n+7):not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .5; } @else { border-left-width: $width * .5; }
			@if $layout != "small" { border-right-width: $width * .75; } @else { border-right-width: $width * .5; }
		}
		.quarters.gutter#{$gutter} .column.four:not(.gutterless),
		.quarters.gutter#{$gutter} .column:nth-of-type(4n+8):not(.gutterless) {
			@if $layout != "small" { border-left-width: $width * .25; } @else { border-left-width: $width * .5; }
		}
	
	}

}